//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(TextProcessor.DatabaseModel.EF_Model.TextDictionaryDatabaseEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets4631e652500590bebb8a6980fa3e7b935d46b7f3e515e61947b4c1f7b089bdd2))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets4631e652500590bebb8a6980fa3e7b935d46b7f3e515e61947b4c1f7b089bdd2 : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "4631e652500590bebb8a6980fa3e7b935d46b7f3e515e61947b4c1f7b089bdd2"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "Хранилище TextDictionaryDatabaseModelContainer.DICTIONARY")
            {
                return GetView0();
            }

            if (extentName == "TextDictionaryDatabaseEntities.DICTIONARY")
            {
                return GetView1();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for Хранилище TextDictionaryDatabaseModelContainer.DICTIONARY.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DICTIONARY
        [Хранилище TextDictionaryDatabaseModel.DICTIONARY](T1.DICTIONARY_ID, T1.DICTIONARY_WORD, T1.DICTIONARY_FREQUENCY)
    FROM (
        SELECT 
            T.ID AS DICTIONARY_ID, 
            T.WORD AS DICTIONARY_WORD, 
            T.FREQUENCY AS DICTIONARY_FREQUENCY, 
            True AS _from0
        FROM TextDictionaryDatabaseEntities.DICTIONARY AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for TextDictionaryDatabaseEntities.DICTIONARY.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing DICTIONARY
        [TextDictionaryDatabaseModel.DICTIONARY](T1.DICTIONARY_ID, T1.DICTIONARY_WORD, T1.DICTIONARY_FREQUENCY)
    FROM (
        SELECT 
            T.ID AS DICTIONARY_ID, 
            T.WORD AS DICTIONARY_WORD, 
            T.FREQUENCY AS DICTIONARY_FREQUENCY, 
            True AS _from0
        FROM [Хранилище TextDictionaryDatabaseModelContainer].DICTIONARY AS T
    ) AS T1");
        }
    }
}
